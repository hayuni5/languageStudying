자바스크립트에서의 this

콘솔창에 this;를 입력하면? Window객체가 나옴
this는 기본적으로 window임
그리고, 일반적으로 this는 객체의 속성인 함수에서 의미가 있다.. 메서드를 호출하면 this는 호출한 메서드를 소유하는 객체가 됨
this != window인 경우?

예제)
	var obj = {
		a: function() { console.log(this); },
	};
	obj.a();	//obj가 출력됨

	객체 메서드 a 안의 this는 ## 객체 ## 를 가리킴. 객체 메서드 호출 시 this를 내부적으로 바꿔주기 때문.

	var a2 = obj.a;
	a2();	// window

	호출할 때, 호출하는 함수가 객체의 메서드인지, 그냥 함수인지가 중요함
	a2는 obj.a를 그냥 꺼내온 거라서 더 이상 obj의 메서드가 아님

----러닝 자바스크립트에서----
### this는 함수를 어떻게 선언했느냐가 아니라, """어떻게 호출했느냐에 따라""" 달라진다는 것을 이해해야 함!

예제2)
	const o = {
		name: 'Wallce',
		speak() {return `My name is ${this.name}!`;}
	}
	o.speak();			//"My name is Wallace!"

		=> 이 경우, this는 객체 o에 묶임

중첩된 함수 안에서 this를 사용하려다 보면 혼란스러울 수 있음. 메서드 내의 보조 함수가 있다거나 등등..

다른 변수에 this를 할당하여 문제를 해결가능함

예제3)
	const o = {
		name: 'Julie',
		greetBackwards: function() {
			const self = this;				//이 때, this는 객체 o에 묶임
			function getReverseName() {
				let nameBackwards = '';
				for(let i=self.name.length-1; i>=0; i--) {	//.length-1 안 하면 undefinedeiluJ 뜬다. 왜 그러지?
				     nameBackwards += self.name[i];
				}
				return nameBackwards;
			}
			return `${getReverseName()} si eman ym ,olleH`;
		}
	};
	o.greetBackwards(); 						//"eiluJ si eman ym ,olleH"
----여기까지 러닝 자바스크립트 p.178, 179 참조----

예제4)
	var obj2 = { c: 'd'};
	function b() {
		console.log(this);
	}
	b();	//window
	b.bind(obj2).call();	//obj2
	b.call(obj2);	//obj2
	b.apply(obj2);	//obj2

	=> 명시적으로 this를 바꾸는 함수메서드3총사 bind, call, apply를 사용하면 window를 가리키던 this가 객체를 가리키게 됨

생성자의 경우
----------------
예제5)
	function Person(name, age) {
		this.name = name;
		this.age = age;
	}
	Person.prototype.sayHi = function() {
		console.log(this.name, this.age);
	}

	new없이 호출한다면?
	
	Person('Hayun', 25);
	console.log(window.name, window.age);	// Hayun 25
	=> 그냥 함수에서 this가 window를 가리키기 때문에 this.name과 this.age가 window.name, window.age가 되어버림
	    이를 막기 위해 new Person을 사용함

예제6  --예제5의 .prototype.sayHi에 이어서)
	var hero = new Person('Hero', 33); 
		// Person {
			name: "Hero",
			age: 33
		    }
	hero.sayHi();
	=> 이 때에 this가 생성자를 통해 생성된 인스턴스, hero 자신을 가리키게 됨~


이벤트리스터 혹은 제이쿼리 등을 썼을 때... this가 내부적으로 바뀜
-------------------------------------------------------------------------
예제7)
	document.body.onclick = function() {
		console.log(this);
	}				// <body> =>엥! 이벤트 발생시 내부적으로 this가 바뀌어버림 ㅠ

	$('div').on('click', function() {
		console.log(this);
	});				// <div> => 얘도 마찬가지 ㅠ

	위와 같은 상황에서 함수 안의 함수에서 this를 쓸 경우, 기본에 충실하게 window를 가리킴
	상위 함수와 똑같은 this를 갖도록 설정하려면 따로 변수에 저장해두던지, 화살표함수(ES6) 를 사용함
예제8)
	$('div').on('click', function() {
		console.log(this);
		const inner = () => {
			console.log('inner', this);
		}
		inner();
	});
	=> ES6 화살표함수는 this로 window 대신 상위 함수의 this를 가져옴(예제8에서는 div가 되겠심)