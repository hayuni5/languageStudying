숫자와 Math객체

컴퓨터는 소수를 2진법으로 바꿔 계산합니다. 이 때, 몇몇 소수는 무한소수가 되는데, 컴퓨터가 끝부분을 버려 유한소수로 만듭니다. 여기서 오차가 발생합니다. 정확한 계산을 못한다는 말입니다.
이를 극복하기 위해 각 소수에 10을 곱해 정수로 만들고 계산한 다음, 결과를 10으로 나눠주는 방법을 쓰기도 했습니다.


숫자.toFixed(소수자릿수) -> 지정 자릿수까지 나타냄. 반올림. 반환값=문자열
숫자.toPrecision(자릿수) -> 자릿수만큼 표현해 문자열로 반환. 숫자가 소수일 경우, 0은 무시하고 따짐.
===> 반환된 문자열은 parseInt / parseFloat를 이용하여 다시 숫자로 바꿔줌

isNaN(숫자) -> 안에 넣은 숫자가 진짜 숫자인지 판별.
		숫자가 아닌 계산시 NaN 값이 나오고, 메소드 인자로 주면 true를 반환합니다.

Infinity -> 제수(나누는 값)이 0일 때 나오는 값. 음의 무한일 경우 -Infinity 반환

parseInt() -> 정수로 변환
	ex) parseInt("1등", 10); // 리턴값 1
	- 문자열이더라도 숫자로 시작하면 뒤의 글자들을 없애고 숫자로 	바꾸어줌
parseFloat() -> 실수로 변환
	ex) parseFloat("0.5달러"); //리턴값 0.5

Number(아무거나) -> 인자로 받은 문자열 안에 문자가 들어있으면 처리 못하고 NaN으로 반환됨


진법 표기
0b'2진수' --> 2진법으로 계산한 10진수 반환
0'8진수' --> 8진법으로 계산한 10진수 반환
0x'16진수' --> 16진법으로 계산한 10진수 반환

