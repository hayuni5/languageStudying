Document Object Model - document를 객체로 구현했다고 생각하셈
계층적 구조여

예시)
html
-head
--title
--meta
--link
-body
--header#header
---nav
---div
--main
--footer
---"hello"	//텍스트 노드
--script

객체로 표현하면
{
document: {
	html: {
		head: {
			title: ...
		},
		body: {
			header: ...
		}
	       }
	}
}

들어있는 개념; 부모, 형제자매, 자식, 자손, ...

Node와 Element
-> Node는 태그노드와 텍스트노드 전체를 가리킴
    Element는 텍스트 노드를 제외, 태그만을 가리킴


속성)))
1. 태그.nodeType	-해당 태그의 종류를 알려주는 숫자가 나옴. 중간에 빈 2, 4, 5, 6은 더 이상 쓰이지 않는 숫자, 7은 거의 안 써서 제로초에선 뺌
	1(Node.ELEMENT_NODE) -> Element
	3(Node.TEXT_NODE) -> 텍스트
	8(Node.COMMENT_NODE) -> 주석
	9(Node.DOCUMENT_NODE) -> Document
	10(Node.DOCUMENT_TYPE_NODE) -> DOCTYPE
	11(Node.DOCUMENT_FRAGMENT_NODE) -> Document Fragment

2. 태그.children, 태그.childNodes
	자식으로 갈 때는 children(텍스트노드제외) 또는 childNodes(텍스트노드 포함) 사용
	예제)
		document.body.children;	// [header, main, footer, script]
		메인을 선택하고 싶다면 document.body.children[1]로 접근

	이 DOM의 속성들은 모든 태그에 다 사용가능

3. 태그.firstChild, 태그.firstElementChild, 태그.lastChild, 태그.lastElementChild
	첫번째 자식/첫번째자식(텍스트무시)/마지막 자식/마지막자식(텍스트 무시)

4. 태그.parentNode, 태그.parentElement
	부모를 찾을 때 사용. 항상 하나이기 때문에 단수형임

5. 태그.previousSibling, 태그.nextSibling, 태그.previousElementSibling, 태그.nextElementSibling
	형제자매 태그 찾을 시 이용함. 바로 전 혹은 바로 다음 형제자매를 찾아줌 (텍스트무시)
	예제)	document.getElementsByTagName('main')[0].nextSibling; // <footer></footer>

6. 태그.innerHTML, 태그.outerHTML
	선택한 태그의 내용물을 얻어오거나 바꿀 수 있음
	const footer = document.getElementsByTagName('footer')[0];
	footer.innerHTML;	//'hello'
	footer.innerHTML = 'goodbye';		//텍스트 내용 바꾸기
	footer.innerHTML = '<b>bold</b>;
	footer.outerHTML = '<footer><b>bold</b></footer>';	//.outerHTML은 현재 태그 자기자신을 포함한 문자열 반환

7. 태그.속성
	id, className(class), name, value, placeholder, checked, disabled, readonly같은 속성값을 볼 수 있음

8. 태그.attributes
	해당 태그가 가진 모든 속성을 보고 싶다면 attributes 속성 사용

9. 태그.clientHeight, 태그.clientWidth
	태그의 margin, border, scrollbar을 제외한 높이와 너비 반환

10. 태그.offsetHeight, 태그.offsetWidth
	태그의 margin만 제외한 높이와 너비를 반환

11. 태그.scrollHeight, 태그.scrollWidth
	스크롤 가능한 범위까지 포함한 태그의 높이와 너비 반환





메소드)))
1. 태그.appendChild()
	예제)
	var newElement = document.createElement('div');
	document.body.appendChild(newElement);
	=> body태그의 마지막 자식 태그로 div 태그가 하나 추가됨

2. 태그.removeChild()	선택한 자식 태그 삭제
	예제)
	document.body.removeChild(document.body.childNodes[document.body.childNodes.length -1]);
					->마지막 자식 태그 선택하는 코드임

3. 태그.insertBefore		자신의 형제 태그로 추가
	예제)
	var newElement  = document.createElement('div');
	document.body.insertBefore(newElement, document.getElemenyById('header'));
	//부모.insertBefore(넣을 태그, 기준 태그) - #header 이전에 새로 만든 div태그를 넣으라는 뜻임

4. 태그.cloneNode		자기 자신을 복사함 - 복사한 것을 저장하여 appendChild나 insertBefore로 집어넣을 수 있음
	예제)
	const clone = document.getElementByTagName('nav')[0].cloneNode();
	const header = document.getElementById('header');
	/* appendChild 혹은 insertBefore로 삽입
	   ex) header.appendChild(clone); => 되는지 확인하셈!
	*/