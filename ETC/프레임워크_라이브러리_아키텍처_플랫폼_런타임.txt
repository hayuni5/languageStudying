라이브러리 : 프로그램 제작 시 필요한 기능
Class나 Function으로 만들어져, 반복적인 코드 작성을 없애기 위해 언제든지 필요한 곳에서 호출하여 사용할 수 있음. 재사용이 필요한 기능에 유용함.
(비유;자동차의 바퀴, 자동차의 헤드라이트, 자동차의 에어백 등의 부품)

ex) jQuery
    GUI에서 버튼, 테이블 등의 구성 요소를 호출하여 쓸 수 있도록 분리해두었다면 라이브러리.
    Windows운영체제에서 볼 수 있는 .dll(dynamic-link library) 파일 역시 라이브러리
    객체지향 프로그래밍(Object-Oriented programming)은 기본적으로 각 기능마다 함수화하는 것. 클래스 라이브러리라고 할 수 있음.

프레임워크 : 설계의 바탕이 되는 기반코드를 개발자가 원하는 방식으로 커스터마이징할 수 있는 라이브러리의 통합체.
프로그램의 기본 구조 혹은 뼈대.
원하는 기능 구현에만 집중하여 빠르게 개발할 수 있도록 필요한 기본 기능을 갖추고 있음. 라이브러리 포함.
프레임워크에 기능을 추가하고, 프레임워크에 의존하여 개발해야 하며 규칙을 준수해야 함.
(비유; 자동차 뼈대)

js프레임워크는 자바스크립트의 구현을 좀더 쉽고 빠르게 하면서 개발 효율성과 사용 편의성을 높이고자 하는 목적으로 개발되었다.

아키텍처: 프로그램 주요 구조 설계
기획한 내용을 프로그램으로 만들었을 때, 필요한 주요 특징을 기술 관점에서 설계하고 명시하는 것.
결과물에 필요한 모든 구성 요소를 명시하지만, 구체적인 구현 방법은 포함되어 있지 않음
프레임워크와 라이브러리는 주요 특징이 아니므로 명시되지 않을 가능성이 큼
(비유; 자동차 설계 - 자동차 헤드라이트가 본넷 밑에 사각형으로 존재한다고 설계하고 헤드라이트 고정 방식이 접착제인지, 볼트인지는 명시되지 않는다. 다만 상황에 따라 포함될 수도 있다.)
 ex) PC 조립시 하드웨어 확인하고 선택한 견적서가 아키텍처라 할 수 있음.

플랫폼 : 프로그램 실행환경
(비유; 자동차 주행 환경-일반 고속도로용, 사막 전용, 경주용, 달 탐사용)
플랫폼 위에 다른 플랫폼이 존재할 수 있음
프로그램의 목적에 맞도록 플랫폼을 선택하는 것이 중요.
ex)
    Window, Linux, macOS 등 Operating System은 모두 플랫폼
    앱스토어, 구글플레이, 원스토어 등 애플리케이션 다운로드 환경도 모두 플랫폼
    V8 JavaScript Engine은 JavaScript를 위한 강력한 플랫폼
    Java 프로그램은 os제약이 없으나 해당 os에 맞는 자바가상머신 위에서 실행되므로 Java플랫폼이 필요

런타임 : 프로그램이 실행 중일때 존재하는 곳
즉, 프로그래밍 언어가 구동되는 화경
ex)JS - 웹브라우저 측면과 node.js 측면
